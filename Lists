List -
Python will give you an IndexError error message if you use an index that exceeds the number of values in your list values.

Traceback (most recent call last):
File "<pyshell#9>", line 1, in <module>
spam[10000]
IndexError: list index out of range

Indexes can be only integer values, not floats. 
Lists can also contain other list values. The values in these lists of lists can be accessed using multiple indexes, like so:

>>> spam = [['cat','bat'],[10,20,30,40,50]]
>>> spam[0]
['cat', 'bat']
>>> spam[0][0]
'cat'
>>> spam[0][1]
'bat'
>>> spam[1][0]
10
>>> spam[1][4]
50
>>> spam[1][5]
Traceback (most recent call last):
  File "<pyshell#14>", line 1, in <module>
    spam[1][5]
IndexError: list index out of range

The first index dictates which list value to use, and the second indicates the value within the list value. For example, spam[0][1] prints 'bat', 
the second value in the first list. If you only use one index, the program will print the full list value at that index.

Negative Indexes :
While indexes start at 0 and go up, you can also use negative integers for the index. 
The integer value -1 refers to the last index in a list, the value -2 refers to the second-to-last index in a list, and so on.


Getting Sublists with Slices:

Just as an index can get a single value from a list, a slice can get several values from a list, in the form of a new list. 
A slice is typed between square brackets,like an index, but it has two integers separated by a colon. Notice the difference between indexes and slices.
• spam[2] is a list with an index (one integer).
• spam[1:4] is a list with a slice (two integers).

In a slice, the first integer is the index where the slice starts. The second integer is the index where the slice ends. 
A slice goes up to, but will not include, the value at the second index. A slice evaluates to a new list value.
As a shortcut, you can leave out one or both of the indexes on either side of the colon in the slice. Leaving out the first index is the same as using 0,
or the beginning of the list. Leaving out the second index is the same as using the length of the list, which will slice to the end of the list.

>>> spam = ['cat','bat','rat','elephant']
>>> spam[0:4]
['cat', 'bat', 'rat', 'elephant']
>>> spam[1:4]
['bat', 'rat', 'elephant']
>>> spam[1:3]
['bat', 'rat']
>>> spam[0:-1]
['cat', 'bat', 'rat']
>>> spam[:2]
['cat', 'bat']
>>> spam[2:]
['rat', 'elephant']
>>> spam[3:]
['elephant']
>>> spam[4:]
[]
>>> spam[5:]
[]
>>> spam[1:]
['bat', 'rat', 'elephant']
>>> spam[:]
['cat', 'bat', 'rat', 'elephant']
------------

Changing Values in List with Indexes :
Normally a variable name goes on the left side of an assignment statement,like spam = 42. 
However, you can also use an index of a list to change the value at that index. For example, spam[1] = 'asha' means “Assign the value at index 1 in the list spam to the string 'asha'.

Removing Values from Lists with del Statements :

>>> del spam[2]
>>> spam
['cat', 'asha', 'elephant']

for i in [0, 1, 2, 3]:
print(i)

for loop actually does is loop through its clause with the variable i set to a successive value in the [0, 1, 2, 3] list in each iteration.
A common Python technique is to use range(len(someList)) with a for loop to iterate over the indexes of a list.

>>> suppliers = ['pen','staplers','flame-throwers','binders']
>>> for i in range(len(suppliers)):
	print('Index ' + str(i) + ' in suppliers is: ' + suppliers[i])
Output:
Index 0 in suppliers is: pen
Index 1 in suppliers is: staplers
Index 2 in suppliers is: flame-throwers
Index 3 in suppliers is: binders


The in and not in Operators:

You can determine whether a value is or isn’t in a list with the in and not in operators. 
Like other operators, in and not in are used in expressions and connect two values: a value to look for in a list and the list where it may be found. 
These expressions will evaluate to a Boolean value.

The Multiple Assignment Trick:

The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code.
>>> cat = ['fat','black','loud']
>>> size = cat[0]
>>> color = cat[1]
>>> disposition = cat[2]
>>> cat
['fat', 'black', 'loud']
>>> cat =['fat','black','loud']
>>> size,colr,disposition = cat
>>> cat
['fat', 'black', 'loud']

The number of variables and the length of the list must be exactly equal, or Python will give you a ValueError:
	
Augmented Assignment Operators:
When assigning a value to a variable, you will frequently use the variable itself. 
For example, after assigning 42 to the variable spam, you would increase the value in spam by 1 with the following code:

>>> spam = 42
>>> spam = spam +1
>>> spam
43
>>> spam = 42
>>> spam += 1
>>> spam
43

As a shortcut, you can use the augmented assignment operator += to do the same thing:

spam += 1 spam = spam + 1
spam -= 1 spam = spam - 1
spam *= 1 spam = spam * 1
spam /= 1 spam = spam / 1
spam %= 1 spam = spam % 1

>>> spam = 'Hello'
>>> spam += 'World!'
>>> spam
'HelloWorld!'
>>> bacon = ['Asha']
>>> bacon *= 3
>>> bacon
['Asha', 'Asha', 'Asha']

>>> bacon = ['Zophie']
>>> bacon *= 3
>>> bacon
['Zophie', 'Zophie', 'Zophie']

Methods:
A Method is the same thing as a function, excep it is "called on" a value. Each data type has its own set of methods. 
The list data type, for example, has several useful methods for finding,adding,removing and otherwise manipulating values in a list.
index() - give the value from the list if value is present in the list otherwise python will give you ValueError error.
When there are duplicates of the value in the list, the index of its first appearance is returned.
>>> spam = ['hello','hi','howdy','heyas']
>>> spam.index('hello')
0
>>> spam.index('heyas')
3
>>> spam.index('howdy howdy')
Traceback (most recent call last):
  File "<pyshell#23>", line 1, in <module>
    spam.index('howdy howdy')
ValueError: 'howdy howdy' is not in list

Adding Values to Lists with the append() and insert() Methods :
To add a new values to a list, use the append() and insert() methods.

>>> spam = ['cat','dog','bat']
>>> spam.append('moose')
>>> spam
['cat', 'dog', 'bat', 'moose']

The append() method call adds the argument to the end of the list. The insert() method can insert a value at any index in the list.
The first argument to insert() is the index for the new value, and the second argument is the new value to be inserted.

>>> spam.insert(1,'chicken')
>>> spam
['cat', 'chicken', 'dog', 'bat', 'moose']

Notice that the code is spam.append('moose') and spam.insert(1, 'chicken'), not spam = spam.append('moose') and spam = spam.insert(1, 'chicken'). 
Neither append() nor insert() gives the new value of spam as its return value. (In fact,the return value of append() and insert() is None, so you definitely wouldn’t
want to store this as the new variable value.) Rather, the list is modified in place.

Methods belong to a single data type. The append() and insert() methods are list methods and can be called only on list values, not on other values such as strings or integers.

>>> eggs = 'hello'
>>> eggs.append('world')
Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    eggs.append('world')
AttributeError: 'str' object has no attribute 'append'

Removing Values from the list using remove(). If the value appears multiple times in the list, only the first instance of the value will be removed.

The del statement is good to use when you know the index of the value you want to remove from the list. The remove() method is good when you know the value you want to remove from the list.

>>> spam.remove('bat')
>>> spam
['cat', 'chicken', 'dog', 'moose']
>>> del spam[2]
>>> spam
['cat', 'chicken', 'moose']

Sorting the values in a list with sort() method.

List of number values or lists of strings can be sorted with the sort() method.

>>> spam = [2,5,3.14,1,-7]
>>> spam.sort()
>>> spam
[-7, 1, 2, 3.14, 5]
>>> spam =['ants','cats','dogs','badgers','elephant']
>>> spam.sort()
>>> spam
['ants', 'badgers', 'cats', 'dogs', 'elephant']

You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order.

>>> spam.sort(reverse=True)
>>> spam
['elephant', 'dogs', 'cats', 'badgers', 'ants']

There are three things you should note about the sort() method. First,the sort() method sorts the list in place; 
don’t try to capture the return value by writing code like spam = spam.sort().
Second, you cannot sort lists that have both number values and string values in them, since Python doesn’t know how to compare these values.

>>> spam = [1,3,2,4,'Alice','Bob']
>>> spam.sort()
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    spam.sort()
TypeError: '<' not supported between instances of 'str' and 'int'

Third, sort() uses “ASCIIbetical order” rather than actual alphabetical order for sorting strings. This means uppercase letters come before lowercase letters.

>>> spam = ['Alice','ants','Bob','badgers','Carol','cats']
>>> spam.sort()
>>> spam
['Alice', 'Bob', 'Carol', 'ants', 'badgers', 'cats']

If you need to sort the values in regular alphabetical order, pass str.lower for the key keyword argument in the sort() method call.

>>> spam.sort(key=str.lower)
>>> spam
['Alice', 'ants', 'badgers', 'Bob', 'Carol', 'cats']

